name: CI/CD Pipeline

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: chatbot-app
  ECS_SERVICE: chatbot-service
  ECS_CLUSTER: chatbot-cluster
  ECS_TASK_DEFINITION: chatbot-task-definition

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Maven dependencies
      uses: actions/cache@v3
      with:
        path: ~/.m2
        key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
        restore-keys: ${{ runner.os }}-m2
        
    - name: Run tests
      run: mvn clean test

  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v2
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build a docker container and push it to ECR
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:latest .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
        
    - name: Output image URI
      run: |
        echo "Image URI: ${{ steps.login-ecr.outputs.registry }}/${{ env.ECR_REPOSITORY }}:${{ github.sha }}"

  deploy-to-ec2:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}
        
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          # Update system packages (Amazon Linux 2023 uses dnf)
          sudo dnf update -y
          
          # Install Docker if not already installed
          if ! command -v docker &> /dev/null; then
            sudo dnf install -y docker
            sudo systemctl start docker
            sudo systemctl enable docker
            sudo usermod -aG docker $USER
          fi
          
          # Fix Docker networking issues on Amazon Linux 2023
          sudo systemctl restart docker
          sleep 5
          
          # Install Docker Compose if not already installed
          if ! command -v docker-compose &> /dev/null; then
            sudo curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
            sudo chmod +x /usr/local/bin/docker-compose
          fi
          
          # Get ECR registry URL
          ECR_REGISTRY=$(aws sts get-caller-identity --query Account --output text).dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com
          IMAGE_URI="$ECR_REGISTRY/${{ env.ECR_REPOSITORY }}:latest"
          
          # Login to ECR
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin $ECR_REGISTRY
          
          # Stop existing container
          docker stop chatbot-app || true
          docker rm chatbot-app || true
          
          # Pull latest image
          docker pull $IMAGE_URI
          
          # Run new container
          docker run -d \
            --name chatbot-app \
            --restart unless-stopped \
            -p 9090:9090 \
            -e AWS_REGION=${{ env.AWS_REGION }} \
            -e SERVER_PORT=9090 \
            -e OPENAI_API_KEY="${{ secrets.OPENAI_API_KEY }}" \
            -e PINECONE_API_KEY="${{ secrets.PINECONE_API_KEY }}" \
            -e PINECONE_API_URL="${{ secrets.PINECONE_API_URL }}" \
            -e PINECONE_INDEX_NAME="${{ secrets.PINECONE_INDEX_NAME }}" \
            -e PINECONE_ENVIRONMENT="${{ secrets.PINECONE_ENVIRONMENT }}" \
            -e PINECONE_PROJECT_ID="${{ secrets.PINECONE_PROJECT_ID }}" \
            -e AWS_DYNAMODB_USERS_TABLE=chatbot-users \
            -e AWS_DYNAMODB_KNOWLEDGE_TABLE=chatbot-knowledge \
            -e AWS_DYNAMODB_CONVERSATIONS_TABLE=chatbot-conversations \
            -e AWS_DYNAMODB_MESSAGES_TABLE=chatbot-messages \
            -e AWS_S3_BUCKET_NAME=chatbot-knowledge-files \
            -e AWS_SQS_QUEUE=knowledge-processing-queue \
            $IMAGE_URI
          
          # Check if container started
          echo "Container status:"
          docker ps -a
          
          # Debug: Check if environment variables are set (without showing values)
          echo "Checking environment variables in container..."
          docker exec chatbot-app env | grep -E "(OPENAI|PINECONE|AWS)" | sed 's/=.*/=***HIDDEN***/'
          
          # Debug: Check if secrets are being passed from GitHub
          echo "Checking GitHub secrets availability..."
          echo "OPENAI_API_KEY is set: $([ -n "${{ secrets.OPENAI_API_KEY }}" ] && echo "YES" || echo "NO")"
          echo "PINECONE_API_KEY is set: $([ -n "${{ secrets.PINECONE_API_KEY }}" ] && echo "YES" || echo "NO")"
          echo "PINECONE_API_URL is set: $([ -n "${{ secrets.PINECONE_API_URL }}" ] && echo "YES" || echo "NO")"
          
          # Check container logs
          echo "Container logs:"
          docker logs chatbot-app
          
          # Wait for application to start
          sleep 30
          
          # Check container status again
          echo "Container status after wait:"
          docker ps -a
          
          # Health check
          curl -f http://localhost:9090/api/v1/health || {
            echo "Health check failed. Container logs:"
            docker logs chatbot-app --tail 50
            exit 1
          }
          
          echo "Deployment completed successfully!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [test, build-and-push, deploy-to-ec2]
    if: always()
    
    steps:
    - name: Notify Success
      if: needs.deploy-to-ec2.result == 'success'
      run: |
        echo "✅ Deployment successful!"
        echo "Application is running at: http://${{ secrets.EC2_HOST }}:9090"
        
    - name: Notify Failure
      if: needs.deploy-to-ec2.result == 'failure'
      run: |
        echo "❌ Deployment failed!"
        echo "Check the logs for more details."
